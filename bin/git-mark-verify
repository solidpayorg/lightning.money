#!/usr/bin/env node

// USAGE: git-mark-verify

// IMPORTS
const gitlog = require('gitlog').default
var bitcoin = require('bitcoinjs-lib')
var argv = require('minimist')(process.argv.slice(2))
const fs = require('fs')
const homedir = require('os').homedir()

// MODEL
// default privkey = brain for urn:json:bitmark
globalThis.data = {
  privkey: '132e7465a63e30a74c5b0deae3573033319e9de18a84878613eaa21878b2b56b'
}

// console.log('data', data)

// FUNCTIONS
const BITMARK = {
  messagePrefix: '\x19BITMARK Signed Message:\n',
  bech32: 'btm',
  bip32: {
    public: 0x019da462,
    private: 0x019d9cfe
  },
  pubKeyHash: 85,
  wif: 213,
  scriptHash: 0x32
}

const options = {
  repo: './',
  fields: ['subject', 'authorName', 'authorDate'],
  execOptions: { maxBuffer: 1000 * 1024 },
  number: 1000,
  fields: ['hash', 'subject']
}

function getPrivKey () {
  try {
    const fetchHeadDir = './.git/'
    var fetchHeadFile = fetchHeadDir + 'FETCH_HEAD'

    var fetchHead = fs.readFileSync(fetchHeadFile).toString()

    var repo = fetchHead
      .split(' ')
      .pop()
      .replace(':', '/')
      .replace('\n', '')

    const gitmarkRepoBase = homedir + '/.gitmark/repo'

    const gitmarkFile = gitmarkRepoBase + '/' + repo + '/gitmark.json'

    return require(gitmarkFile).privkey
  } catch {
    return undefined
  }
}

// INIT
data.privkey = argv._[0] || getPrivKey() || data.privkey

var POINT = Buffer.from(data.privkey, 'hex')

var OFFSET = Buffer.from('000000000000000000000000' + data.hash, 'hex')

// MAIN
// priv keys
var b1 = BigInt('0x' + data.privkey)
var b2
var b3

// commits
const commits = gitlog(options)
if (commits.length === 1) {
  console.log('Set up new repository with a gitmark')
  process.exit()
}

console.log('Genesis tx need not be verified\n')
for (var i = commits.length-1; i >= 0; i--) {
  var subject = commits[i].subject
  if (subject.match(/^gitmark/)) {
    var hash = commits[i + 1].hash
    console.log()
    console.log(subject)
    console.log('hash:', hash)
    b2 = BigInt('0x' + hash)
    b3 = BigInt.asIntN(256, b1 + b2)
    console.log(b3.toString(16))
    var keyPair1 = bitcoin.ECPair.fromPrivateKey(
      Buffer.from(b3.toString(16), 'hex'),
      { network: BITMARK }
    )
    console.log('private key WIF:', keyPair1.toWIF())

    var { address } = bitcoin.payments.p2pkh({
      pubkey: keyPair1.publicKey,
      network: BITMARK
    })
    console.log('verify address computed from private key:', address)

    console.log(
      'https://chainz.cryptoid.info/marks/tx.dws?' +
        subject.split(' ')[1].split(':')[0] +
        '.htm'
    )
  }
}

